[components]
# 1. To specify a component, first of all, give it a name (e.g. "lexical")
# then use colon ":" to separate the name of the component from its configuration
# 2. To configure a component
# 2a. choose a type (e.g. BrownLexical) using the key "type="
# 2b. group it into a model using the key "model="
#     "model=" takes 1-based values and it is used to group components into a single coherent model
#     a higher model (e.g. model=2) always contains the components in lower models (e.g. model=1)
#     models are trained sequentially from lowest to highest
#     higher models take previously trained components as initialisers 
# For example, 
lexical: type=BrownLexical model=1
# We could also have the following component
# jump: type=VogelJump model=1
# but then both BrownLexical and VogelJump would be trained jointly in one EM optimisation
# instead, we typically train easier models first, to help avoid local optima
# Thus, we prefer doing
jump: type=VogelJump model=2
# note how component 'jump' of type 'VogelJump' is only optimised from the 2nd EM optimisation

# Other examples are
#llLexical: type=LogLinearLexical model=2
#llsuffix2: type=LogLinearSuffix model=2 length=2 
#llsuffix3: type=LogLinearSuffix model=2 legnth=3

# In this case, we could have jump be added only in a 3rd EM optimisation taking all other pre-trained components as initialisers
# jump: type=VogelJump model=3


[iterations]
# Iteration per model in order
# this schedules 3 iterations for the first EM optimisation (using components in model 1)
3
# this schedules 5 iterations for the second EM optimisation (using pre-trained components in model 1 and new components in model 2)
5
# this would schedule another 10 iterations for a possible third EM optimisation (again using all pre-trained components in model 2 and new components in model 3)
#10
